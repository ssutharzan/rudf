[
["index.html", "Introduction to creating custom functions in R 1 About this workshop", " Introduction to creating custom functions in R Sreeskandarajan Sutharzan 2020-09-09 1 About this workshop A gentle introduction to creating your own functions in R We’ll focus on Components of R functions Why do we need custom functions How to create a custom functions Types of custom functions Simple examples "],
["functions-in-r.html", "2 Functions in R", " 2 Functions in R Functions are R objects which are used to create access manipulate delete other R Objects Hence, functions are key elements of R Examples vector() length() plot() ls() [ rm() "],
["whywhen-do-you-need-custom-functions.html", "3 Why/When do you need custom functions", " 3 Why/When do you need custom functions You need custom functions/user defined functions (UDFs) When the existing functions are not enough for your work When when need to modify/simplify an existing (e.g. wrapper) To modularize your code To write testable and elegant code "],
["writing-custom-functions.html", "4 Writing custom functions", " 4 Writing custom functions Recall: Key components of a function Arguments: Objects the function takes in (i.e. inputs) Body: Contains the code to process the inputs (gives the functionality) Environment: Where does the function works (it’s a bit more than that) Return : The object returned (i.e. output) Name: The name bound to the function object (can be nameless!) Syntax: &lt;name&gt; &lt;- function(&lt;argument 1&gt;, &lt;argument 2&gt;) { &lt;body&gt; return(&lt;return object&gt;) } Example countA &lt;- function (seq) { # This function finds the number of &#39;A&#39;s in a given nucleotide sequence # Convert input sequence to lower case character vector seq_lower &lt;- strsplit(as.vector(tolower(seq)),&quot;&quot;)[[1]] # Count the number of As a_count &lt;- length(which(seq_lower==&quot;a&quot;)) # Returning the A count return(a_count) } Let’s invoke the function! # Input nucleotide string sequence nucleotide_seq &lt;- &quot;ATGCaaaTTGG&quot; # has 4 &#39;A&#39;s ! # Count &#39;A&#39;s using the function &#39;countA()&#39; num_a &lt;- countA(seq = nucleotide_seq) cat(paste0(&quot;Number of &#39;A&#39;s = &quot;, num_a,&quot;\\n&quot;)) ## Number of &#39;A&#39;s = 4 "],
["returning-multiple-objects.html", "5 Returning multiple objects", " 5 Returning multiple objects Combine the objects you want into a single object Example countA &lt;- function (seq) { # This function finds the number of &#39;A&#39;s in a given nucleotide sequence # Convert input sequence to lower case character vector seq_lower &lt;- strsplit(tolower(seq),&quot;&quot;)[[1]] # Count the number of As a_count &lt;- length(which(seq_lower==&quot;a&quot;)) # Preparing the returning object res &lt;- list() res$count &lt;- a_count res$prop &lt;- a_count/length(seq_lower) # Returning the A count return(res) } # Printing the results nucleotide_seq &lt;- &quot;ATGCaaaTTGG&quot; count_res &lt;- countA(seq = nucleotide_seq) cat(paste0(&quot;Number of &#39;A&#39;s = &quot;, count_res$count,&quot;\\n&quot;)) ## Number of &#39;A&#39;s = 4 cat(paste0(&quot;Propotion of &#39;A&#39;s = &quot;, count_res$prop,&quot;\\n&quot;)) ## Propotion of &#39;A&#39;s = 0.363636363636364 "],
["arguments-with-default-values.html", "6 Arguments with default values", " 6 Arguments with default values Syntax: &lt;name&gt; &lt;- function(&lt;argument 1&gt;, &lt;argument 2&gt;=&lt;default value&gt;) { &lt;body&gt; return(&lt;return object&gt;) } Example catln &lt;- function (seq, sep = &quot;\\n&quot;) { # What does this function do? if(!is.character(seq)) { stop(&quot;please provide a character vector as the seq argument&quot;) } if(!is.character(sep)) { stop(&quot;Please provide a character or characters as the sep argument&quot;) } cat(seq, sep = sep) } ## cat() vs catln()! seqs &lt;- c(&quot;AAATTT&quot;,&quot;GC&quot;) cat(seqs) catln(seqs) catln(seq = seqs, sep = &quot;\\t&quot;) catln(seq = seqs, sep = &quot;\\t&quot;) "],
["anonymous-functions.html", "7 Anonymous Functions", " 7 Anonymous Functions A function with out a name! Example seqs &lt;- c(&quot;AATT&quot;,&quot;TGG&quot;) seqs_lower &lt;- sapply(seqs, function(x) tolower(strsplit(x, &quot;&quot;)[[1]])) It’s preferable to keep an anonymous function small. If it spans across multiple lines consider giving it a name! "],
["putting-all-together.html", "8 Putting all together", " 8 Putting all together An example funtion: count_nucleotide &lt;- function (seq, base = &quot;N&quot;) { # This function finds the number of occurrences of a given base # in a given nucleotide sequence # Input: # seq: Nucleotide sequence string # base: The base to count # Output: # A named list containing the following # count: The base count # prop: The base propotion # Input validation if(!is.character(seq) | length(seq) &gt; 1) { stop(&quot;please provide a string as the seq argument&quot;) } if(!is.character(base) | length(base) &gt; 1 | nchar(base) &gt; 1) { stop(&quot;Please provide a base &quot;) } # Splitting input sequence seq_lower &lt;- strsplit(toupper(seq), &quot;&quot;)[[1]] # Counting the number of As n_count &lt;- length(which(seq_lower == base)) # Preparing the returning object res &lt;- list() res$count &lt;- n_count res$prop &lt;- n_count/length(seq_lower) # Returning the A count return(res) } Let’s use count_nucleotide()! seqs &lt;- c(&quot;ANN&quot;, &quot;TAGCTA&quot;) bases &lt;- c(&quot;N&quot;,&quot;T&quot;) base_counts &lt;- lapply(1:length(seqs), function(x) count_nucleotide(seqs[x], bases[x])) base_counts ## [[1]] ## [[1]]$count ## [1] 2 ## ## [[1]]$prop ## [1] 0.6666667 ## ## ## [[2]] ## [[2]]$count ## [1] 2 ## ## [[2]]$prop ## [1] 0.3333333 How could you further improve count_nucleotide() "],
["where-to-go-from-here.html", "9 Where to go from here", " 9 Where to go from here Start using custom functions in your code Lookout for advanced workshops on object oriented and functional R Advanced R: Super Cool book! (https://adv-r.hadley.nz/) R Internals: (https://cran.r-project.org/doc/manuals/r-release/R-ints.html) Clean: A great general coding book! (https://www.oreilly.com/library/view/clean-code-a/9780136083238/) Practice Practice Practice! "]
]
