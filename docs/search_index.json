[
["index.html", "Introduction to creating custom functions in R 1 About this workshop", " Introduction to creating custom functions in R Sreeskandarajan Sutharzan 2020-09-04 1 About this workshop A gentle introduction to creating your own functions in R We’ll focus on Components of R functions Why do we need custom functions How to create a custom functions Types of custom functions Simple examples "],
["functions-in-r.html", "2 Functions in R", " 2 Functions in R Functions are R objects which are used to create access manipulate delete other R Objects Hence, functions are key elements of R Examples vector() length() plot() ls() [ rm() "],
["whywhen-do-you-need-custom-functions.html", "3 Why/When do you need custom functions", " 3 Why/When do you need custom functions You need custom functions/user defined functions (UDFs) When the existing functions are not enough for your work When when need to modify/simplify an existing (e.g. wrapper) To modularize your code To write testable and elegant code "],
["writing-custom-functions.html", "4 Writing custom functions", " 4 Writing custom functions Recall: Key components of a function Arguments: Objects the function takes in (i.e. inputs) Body: Contains the code to process the inputs (gives the functionality) Environment: Where does the function works (it’s a bit more than that) Return : The object returned (i.e. output) Name: The name bound to the function object (can be nameless!) Syntax: &lt;name&gt; &lt;- function(&lt;argument 1&gt;, &lt;argument 2&gt;) { &lt;body&gt; return(&lt;return object&gt;) } Example countA &lt;- function (seq) { # This function finds the number of &#39;A&#39;s in a given nucleotide sequence # Convert input sequence to lower case character vector seq_lower &lt;- strsplit(as.vector(tolower(seq)),&quot;&quot;)[[1]] # Count the number of As a_count &lt;- length(which(seq_lower==&quot;a&quot;)) # Returning the A count return(a_count) } Let’s use the function! # Input nucleotide string sequence nucleotide_seq &lt;- &quot;ATGCaaaTTGG&quot; # has 4 &#39;A&#39;s ! # Count &#39;A&#39;s using the function &#39;countA()&#39; num_a &lt;- countA(seq = nucleotide_seq) cat(paste0(&quot;Number of &#39;A&#39;s = &quot;, num_a,&quot;\\n&quot;)) ## Number of &#39;A&#39;s = 4 "],
["returning-multiple-objects.html", "5 Returning multiple objects", " 5 Returning multiple objects Combine the objects you want into a single object Example countA &lt;- function (seq) { # This function finds the number of &#39;A&#39;s in a given nucleotide sequence # Convert input sequence to lower case character vector seq_lower &lt;- strsplit(as.vector(tolower(seq)),&quot;&quot;)[[1]] # Count the number of As a_count &lt;- length(which(seq_lower==&quot;a&quot;)) # Preparing the returning object res &lt;- list() res$count &lt;- a_count res$prop &lt;- a_count/length(seq_lower) # Returning the A count return(res) } # Printing the results nucleotide_seq &lt;- &quot;ATGCaaaTTGG&quot; count_res &lt;- countA(seq = nucleotide_seq) cat(paste0(&quot;Number of &#39;A&#39;s = &quot;, count_res$count,&quot;\\n&quot;)) ## Number of &#39;A&#39;s = 4 cat(paste0(&quot;Propotion of &#39;A&#39;s = &quot;, count_res$prop,&quot;\\n&quot;)) ## Propotion of &#39;A&#39;s = 0.363636363636364 "]
]
